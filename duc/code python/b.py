import open3d as o3d
import numpy as np
from rplidar import RPLidar, RPLidarException
import time
import serial.tools.list_ports
import threading
import cv2
import math
import logging
import serial
from flask import Flask, render_template, Response
import os

# Thi·∫øt l·∫≠p logging ƒë·ªÉ debug
logging.basicConfig(filename='lidar_slam.log', level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

# --- C·∫•u h√¨nh Flask ---
app = Flask(__name__)
map_lock = threading.Lock()
latest_map_frame = None # Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ khung h√¨nh b·∫£n ƒë·ªì m·ªõi nh·∫•t

# --- PH·∫¶N 1: L·ªöP ƒêI·ªÄU KHI·ªÇN LIDAR ---

def get_com_ports():
    ports = serial.tools.list_ports.comports()
    return [port.device for port in ports]

def check_com_port(port_name):
    return port_name in get_com_ports()

def auto_detect_lidar_port():
    for port in get_com_ports():
        try:
            lidar = RPLidar(port, 256000, timeout=0.1)
            info = lidar.get_info()
            lidar.disconnect()
            logging.info(f"T√¨m th·∫•y LiDAR tr√™n c·ªïng {port}: {info}")
            return port
        except (RPLidarException, serial.serialutil.SerialException) as e:
            logging.warning(f"Th·ª≠ c·ªïng {port} th·∫•t b·∫°i: {e}")
            continue
    return None

class LidarScanner:
    def __init__(self, port="COM6", baudrate=256000):
        self.port = port if port else auto_detect_lidar_port()
        self.baudrate = baudrate
        self.lidar = None
        self.latest_scan = None
        self._lock = threading.Lock()
        self._thread = None
        self._running = False
        self._initialized = False

    def connect(self, max_attempts=5, retry_delay=3):
        if not self.port:
            logging.error("Kh√¥ng t√¨m th·∫•y c·ªïng LiDAR kh·∫£ d·ª•ng.")
            print("L·ªói: Kh√¥ng t√¨m th·∫•y c·ªïng LiDAR kh·∫£ d·ª•ng.")
            return False
        for attempt in range(max_attempts):
            if not check_com_port(self.port):
                logging.error(f"Kh√¥ng t√¨m th·∫•y c·ªïng {self.port}. C√°c c·ªïng c√≥ s·∫µn: {get_com_ports()}")
                print(f"L·ªói: Kh√¥ng t√¨m th·∫•y c·ªïng {self.port}. C√°c c·ªïng c√≥ s·∫µn: {get_com_ports()}")
                return False
            try:
                logging.info(f"Th·ª≠ k·∫øt n·ªëi t·ªõi LiDAR tr√™n c·ªïng {self.port} (l·∫ßn {attempt + 1}/{max_attempts})...")
                print(f"Th·ª≠ k·∫øt n·ªëi t·ªõi LiDAR tr√™n c·ªïng {self.port} (l·∫ßn {attempt + 1}/{max_attempts})...")
                self.lidar = RPLidar(self.port, self.baudrate, timeout=5)
                self.lidar.reset()  # Reset LiDAR ƒë·ªÉ ƒë·∫£m b·∫£o tr·∫°ng th√°i s·∫°ch
                time.sleep(1)
                info = self.lidar.get_info()
                self.lidar.start_motor()
                time.sleep(2)  # Ch·ªù motor ·ªïn ƒë·ªãnh
                health = self.lidar.get_health()
                if health[0] != 'Good':
                    logging.error(f"LiDAR kh√¥ng ·ªü tr·∫°ng th√°i t·ªët: {health}")
                    print(f"L·ªói: LiDAR kh√¥ng ·ªü tr·∫°ng th√°i t·ªët: {health}")
                    self.lidar.disconnect()
                    self.lidar = None
                    continue
                logging.info(f"K·∫øt n·ªëi LiDAR th√†nh c√¥ng. Th√¥ng tin: {info}")
                print(f"‚úÖ K·∫øt n·ªëi LiDAR th√†nh c√¥ng. Th√¥ng tin: {info}")
                self._initialized = True
                return True
            except (RPLidarException, serial.serialutil.SerialException) as e:
                logging.error(f"L·ªói khi k·∫øt n·ªëi LiDAR: {e}")
                print(f"L·ªói khi k·∫øt n·ªëi LiDAR: {e}")
                if self.lidar:
                    self.lidar.disconnect()
                    self.lidar = None
                if attempt < max_attempts - 1:
                    time.sleep(retry_delay)
                    continue
                return False

    def start(self):
        if self.lidar is None and not self.connect():
            return
        self._running = True
        self._thread = threading.Thread(target=self._read_loop, daemon=True)
        self._thread.start()
        logging.info("B·∫Øt ƒë·∫ßu lu·ªìng ƒë·ªçc d·ªØ li·ªáu LiDAR.")
        print("üåÄ B·∫Øt ƒë·∫ßu lu·ªìng ƒë·ªçc d·ªØ li·ªáu LiDAR.")

    def stop(self):
        logging.info("ƒêang d·ª´ng LiDAR...")
        print("üî¥ ƒêang d·ª´ng LiDAR...")
        self._running = False
        if self.lidar is not None:
            try:
                self.lidar.stop()
                self.lidar.stop_motor()
                self.lidar.disconnect()
            except Exception as e:
                logging.error(f"L·ªói khi d·ª´ng LiDAR: {e}")
                print(f"L·ªói khi d·ª´ng LiDAR: {e}")
        if self._thread is not None and self._thread.is_alive():
            self._thread.join(timeout=3.0)
        self._initialized = False
        self.lidar = None
        logging.info("LiDAR ƒë√£ d·ª´ng.")
        print("‚úÖ LiDAR ƒë√£ d·ª´ng.")

    def _read_loop(self):
        while self._running:
            try:
                if not self.check_health():
                    logging.error("LiDAR kh√¥ng ·ªü tr·∫°ng th√°i t·ªët, th·ª≠ k·∫øt n·ªëi l·∫°i...")
                    print("LiDAR kh√¥ng ·ªü tr·∫°ng th√°i t·ªët, th·ª≠ k·∫øt n·ªëi l·∫°i...")
                    self._initialized = False
                    self.connect()
                    continue
                for scan in self.lidar.iter_scans(min_len=10, max_buf_meas=1000):
                    if not self._running:
                        break
                    with self._lock:
                        self.latest_scan = np.array(scan)
                        logging.debug(f"Nh·∫≠n ƒë∆∞·ª£c qu√©t m·ªõi v·ªõi {len(self.latest_scan)} ƒëi·ªÉm.")
            except (RPLidarException, serial.serialutil.SerialException) as e:
                logging.error(f"L·ªói trong lu·ªìng ƒë·ªçc LiDAR: {e}. Th·ª≠ k·∫øt n·ªëi l·∫°i sau 3s...")
                print(f"L·ªói trong lu·ªìng ƒë·ªçc LiDAR: {e}. Th·ª≠ k·∫øt n·ªëi l·∫°i sau 3s...")
                self._initialized = False
                time.sleep(3)
                if self._running:
                    self.connect()

    def get_scan(self):
        with self._lock:
            return self.latest_scan.copy() if self.latest_scan is not None else None

    def is_initialized(self):
        return self._initialized

    def check_health(self):
        try:
            return self.lidar.get_health()[0] == 'Good'
        except Exception as e:
            logging.error(f"L·ªói khi ki·ªÉm tra s·ª©c kh·ªèe LiDAR: {e}")
            return False

# --- PH·∫¶N 2: C√ÅC H√ÄM SLAM ---

def polar_to_cartesian_3d(scan_data):
    if scan_data is None or len(scan_data) == 0:
        return np.array([])
    points_cartesian = []
    for point in scan_data:
        quality, angle, distance = point
        # L·ªçc c√°c ƒëi·ªÉm n·∫±m ngo√†i cung 270 ƒë·ªô ph√≠a tr∆∞·ªõc
        # Gi·∫£ s·ª≠ ph√≠a tr∆∞·ªõc l√† 0 ƒë·ªô, ta s·∫Ω l·∫•y g√≥c t·ª´ -135 ƒë·∫øn 135 ƒë·ªô.
        # V√¨ RPLidar tr·∫£ v·ªÅ g√≥c t·ª´ 0-360, ƒëi·ªÅu n√†y t∆∞∆°ng ƒë∆∞∆°ng v·ªõi (0 <= g√≥c <= 135) ho·∫∑c (225 <= g√≥c < 360)
        is_in_front_arc = (angle <= 135) or (angle >= 225)
        if distance > 0 and distance < 10000 and quality > 5 and is_in_front_arc:
            angle_rad = math.radians(angle)
            x = distance * math.cos(angle_rad)
            y = distance * math.sin(angle_rad)
            points_cartesian.append([x, y, 0.0])
    return np.array(points_cartesian)

def lidar_to_point_cloud(points):
    point_cloud = o3d.geometry.PointCloud()
    point_cloud.points = o3d.utility.Vector3dVector(points)
    return point_cloud

def downsample_point_cloud(point_cloud, voxel_size):
    return point_cloud.voxel_down_sample(voxel_size)

def filter_outliers(point_cloud, nb_neighbors=10, std_ratio=2.5):
    pcd, _ = point_cloud.remove_statistical_outlier(nb_neighbors=nb_neighbors, std_ratio=std_ratio)
    return pcd

def remove_duplicate_points(points, voxel_size=10.0):
    pcd = lidar_to_point_cloud(points)
    pcd_down = downsample_point_cloud(pcd, voxel_size)
    return np.asarray(pcd_down.points)

def remove_dynamic_points(current_points, prev_points, distance_threshold=100.0):

    if prev_points is None or len(prev_points) == 0:
        return current_points    # Gi·ªØ nguy√™n n·∫øu kh√¥ng c√≥ ƒëi·ªÉm tr∆∞·ªõc

    pcd_current = lidar_to_point_cloud(current_points)
    pcd_prev = lidar_to_point_cloud(prev_points)
    distances = pcd_current.compute_point_cloud_distance(pcd_prev)
    distances = np.asarray(distances)
    static_indices = np.where(distances < distance_threshold)[0]
    static_pcd = pcd_current.select_by_index(static_indices)
    return np.asarray(static_pcd.points)
def transform_points(points, rotation_matrix, translation_vector):
    points = np.asarray(points)
    return np.dot(points, rotation_matrix.T) + translation_vector

def inverse_transform_points(points, rotation_matrix, translation_vector):
    points = np.asarray(points)
    inverse_transformed_points = np.dot(points - translation_vector, rotation_matrix)
    return inverse_transformed_points

def icp(source_points, target_points, threshold, voxel_size, trans_init=np.eye(4)):
    if len(source_points) < 10 or len(target_points) < 10:
        logging.warning("Kh√¥ng ƒë·ªß ƒëi·ªÉm ƒë·ªÉ ch·∫°y ICP.")
        return float('inf'), np.eye(4)
    
    source_pcd = lidar_to_point_cloud(source_points)
    target_pcd = lidar_to_point_cloud(target_points)
    
    source_pcd_down = downsample_point_cloud(source_pcd, voxel_size)
    target_pcd_down = downsample_point_cloud(target_pcd, voxel_size)
    
    criteria = o3d.pipelines.registration.ICPConvergenceCriteria(max_iteration=50)
    reg_p2p = o3d.pipelines.registration.registration_icp(
        source_pcd_down, target_pcd_down, threshold, trans_init,
        o3d.pipelines.registration.TransformationEstimationPointToPoint(), criteria)
    
    logging.info(f"ICP completed with RMSE: {reg_p2p.inlier_rmse:.4f}")
    return reg_p2p.inlier_rmse, reg_p2p.transformation

def update_occupancy_map(occupancy_map, points_global, robot_pos, map_center_px, resolution):
    """
    C·∫≠p nh·∫≠t b·∫£n ƒë·ªì chi·∫øm d·ª•ng, ƒë·∫£m b·∫£o ƒëi·ªÉm ƒëen kh√¥ng ghi ƒë√® l√™n v√πng tr·∫Øng ƒë√£ qu√©t.
    ƒê∆∞·ªùng tr·∫Øng ƒë∆∞·ª£c v·∫Ω ƒë·∫øn g·∫ßn ƒëi·ªÉm v·∫≠t c·∫£n ƒë·ªÉ kh√¥ng ghi ƒë√® pixel cu·ªëi.
    
    Args:
        occupancy_map (np.ndarray): B·∫£n ƒë·ªì chi·∫øm d·ª•ng (·∫£nh RGB, k√≠ch th∆∞·ªõc height x width x 3).
        points_global (np.ndarray): C√°c ƒëi·ªÉm 3D to√†n c·ª•c (N x 3) t·ª´ c·∫£m bi·∫øn (x, y, z).
        robot_pos (np.ndarray): V·ªã tr√≠ robot trong h·ªá t·ªça ƒë·ªô to√†n c·ª•c (x, y, z).
        map_center_px (tuple): T·ªça ƒë·ªô pixel c·ªßa t√¢m b·∫£n ƒë·ªì (x, y).
        resolution (float): ƒê·ªô ph√¢n gi·∫£i b·∫£n ƒë·ªì (mm/pixel).
    """
    if len(points_global) == 0:
        return  # B·ªè qua n·∫øu kh√¥ng c√≥ ƒëi·ªÉm
    
    # T√≠nh t·ªça ƒë·ªô pixel c·ªßa robot
    robot_x_px = int(map_center_px[0] + robot_pos[0] / resolution)
    robot_y_px = int(map_center_px[1] - robot_pos[1] / resolution)
    
    for point_global in points_global:
        # T√≠nh t·ªça ƒë·ªô pixel c·ªßa ƒëi·ªÉm v·∫≠t c·∫£n
        point_x_px = int(map_center_px[0] + point_global[0] / resolution)
        point_y_px = int(map_center_px[1] - point_global[1] / resolution)
        
        # Ki·ªÉm tra t·ªça ƒë·ªô h·ª£p l·ªá
        if 0 <= point_x_px < occupancy_map.shape[1] and 0 <= point_y_px < occupancy_map.shape[0]:
            # T√≠nh ƒëi·ªÉm trung gian c√°ch ƒëi·ªÉm v·∫≠t c·∫£n 1 pixel
            delta_x = point_x_px - robot_x_px
            delta_y = point_y_px - robot_y_px
            distance = max(1, np.hypot(delta_x, delta_y))  # Kho·∫£ng c√°ch Euclidean, tr√°nh chia cho 0
            
            if distance > 2:  # Ch·ªâ v·∫Ω ƒë∆∞·ªùng n·∫øu kho·∫£ng c√°ch ƒë·ªß l·ªõn
                # T√≠nh ƒëi·ªÉm trung gian (c√°ch ƒëi·ªÉm cu·ªëi 1 pixel)
                scale = (distance - 2) / distance  # R√∫t ng·∫Øn ƒë∆∞·ªùng ƒë·ªÉ kh√¥ng ch·∫°m ƒëi·ªÉm cu·ªëi
                intermediate_x_px = int(robot_x_px + delta_x * scale)
                intermediate_y_px = int(robot_y_px + delta_y * scale)
                
                # V·∫Ω ƒë∆∞·ªùng tr·∫Øng ƒë·∫øn ƒëi·ªÉm trung gian
                cv2.line(occupancy_map, (robot_x_px, robot_y_px), 
                         (intermediate_x_px, intermediate_y_px), (255, 255, 255), 1)
            
            # Ch·ªâ v·∫Ω ƒëi·ªÉm ƒëen n·∫øu pixel kh√¥ng ph·∫£i l√† m√†u tr·∫Øng t·ª´ c√°c l·∫ßn qu√©t tr∆∞·ªõc
            if not np.array_equal(occupancy_map[point_y_px, point_x_px], [255, 255, 255]):
                cv2.circle(occupancy_map, (point_x_px, point_y_px), 1, (0, 0, 0), -1)
        
# --- C√ÅC ROUTE C·ª¶A FLASK ---

@app.route('/')
def index():
    """Render trang web ch√≠nh."""
    # render_template s·∫Ω t·ª± ƒë·ªông t√¨m file trong th∆∞ m·ª•c 'templates'
    return render_template('index.html')

def generate_frames():
    """H√†m generator ƒë·ªÉ stream c√°c khung h√¨nh b·∫£n ƒë·ªì m·ªôt c√°ch ·ªïn ƒë·ªãnh h∆°n."""
    while True:
        # Gi·ªØ lock trong th·ªùi gian ng·∫Øn nh·∫•t c√≥ th·ªÉ ƒë·ªÉ sao ch√©p frame
        with map_lock:
            # Sao ch√©p frame ƒë·ªÉ tr√°nh race condition khi encode
            frame_to_encode = latest_map_frame.copy() if latest_map_frame is not None else None

        # X·ª≠ l√Ω sau khi ƒë√£ nh·∫£ lock
        if frame_to_encode is None:
            # N·∫øu ch∆∞a c√≥ frame, t·∫°o m·ªôt frame gi·ªØ ch·ªó ƒë·ªÉ g·ª≠i cho client
            # ƒêi·ªÅu n√†y ngƒÉn tr√¨nh duy·ªát b·ªã timeout v√† cung c·∫•p ph·∫£n h·ªìi
            placeholder = np.full((800, 800, 3), 200, dtype=np.uint8)
            cv2.putText(placeholder, "Dang cho du lieu ban do...", (50, 400), 
                        cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 0, 0), 2)
            frame_to_encode = placeholder
        
        try:
            # M√£ h√≥a khung h√¨nh th√†nh ƒë·ªãnh d·∫°ng JPEG
            (flag, encodedImage) = cv2.imencode(".jpg", frame_to_encode)
            if not flag:
                # N·∫øu m√£ h√≥a th·∫•t b·∫°i, b·ªè qua frame n√†y
                logging.warning("Kh√¥ng th·ªÉ m√£ h√≥a frame th√†nh JPEG.")
                time.sleep(0.1) # ƒê·ª£i m·ªôt ch√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i
                continue
        except Exception as e:
            # Ghi l·∫°i l·ªói n·∫øu c√≥ b·∫•t k·ª≥ l·ªói n√†o x·∫£y ra trong qu√° tr√¨nh m√£ h√≥a
            logging.error(f"L·ªói khi m√£ h√≥a frame: {e}")
            time.sleep(0.1)
            continue

        # Yield khung h√¨nh ƒë√£ m√£ h√≥a theo ƒë·ªãnh d·∫°ng multipart
        yield (b'--frame\r\n' b'Content-Type: image/jpeg\r\n\r\n' +
               bytearray(encodedImage) + b'\r\n')
        
        # ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô stream ƒë·ªÉ kh√¥ng l√†m qu√° t·∫£i CPU
        time.sleep(0.05)

@app.route('/video_feed')
def video_feed():
    """Route ƒë·ªÉ cung c·∫•p video stream."""
    return Response(generate_frames(),
                    mimetype='multipart/x-mixed-replace; boundary=frame')

# --- PH·∫¶N 4: CH∆Ø∆†NG TR√åNH CH√çNH K·∫æT H·ª¢P ---

if __name__ == "__main__":
    # --- C·∫•u h√¨nh ---
    LIDAR_PORT = "COM6"
    ICP_VOXEL_SIZE = 20.0
    ICP_THRESHOLD = 250.0  # TƒÉng ng∆∞·ª°ng ƒë·ªÉ ·ªïn ƒë·ªãnh
    MIN_SCAN_INTERVAL = 0
    MAP_SIZE_MM = 30000  # Gi·∫£m xu·ªëng 8m x 8m
    RESOLUTION_MM_PER_PIXEL = 30  # 2cm/pixelS
    MAP_DIM_PIXELS = int(MAP_SIZE_MM / RESOLUTION_MM_PER_PIXEL)
    DUPLICATE_VOXEL_SIZE = 35
    DYNAMIC_DISTANCE_THRESHOLD = 200.0
    
    # --- Kh·ªüi t·∫°o ---
    scanner = LidarScanner(port=LIDAR_PORT)
    if not scanner.connect():
        logging.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi LiDAR, tho√°t ch∆∞∆°ng tr√¨nh.")
        print("L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi LiDAR, tho√°t ch∆∞∆°ng tr√¨nh.")
        exit(1)
    
    scanner.start()
    time.sleep(0.1)  # Ch·ªù LiDAR kh·ªüi t·∫°o
    
    global_map = o3d.geometry.PointCloud()
    global_pose = np.eye(4)
    last_slam_time = time.time()
    prev_points = None
    current_points_global = np.array([])  # Kh·ªüi t·∫°o ƒë·ªÉ tr√°nh NameError
    
    occupancy_map = np.full((MAP_DIM_PIXELS, MAP_DIM_PIXELS, 3), 150, dtype=np.uint8)
    map_center_px = (MAP_DIM_PIXELS // 2, MAP_DIM_PIXELS // 2)
    
    logging.info("B·∫Øt ƒë·∫ßu qu√©t v√† l·∫≠p b·∫£n ƒë·ªì th·ªùi gian th·ª±c.")
    print("\nB·∫Øt ƒë·∫ßu qu√©t v√† l·∫≠p b·∫£n ƒë·ªì th·ªùi gian th·ª±c.")
    
    # Kh·ªüi ch·∫°y Flask trong m·ªôt lu·ªìng ri√™ng bi·ªát
    flask_thread = threading.Thread(target=lambda: app.run(host='0.0.0.0', port=5000, debug=False, use_reloader=False), daemon=True)
    flask_thread.start()
    print("‚úÖ Web server ƒë√£ kh·ªüi ƒë·ªông. Truy c·∫≠p http://127.0.0.1:5000 ƒë·ªÉ xem b·∫£n ƒë·ªì.")
    try:
        while scanner.is_initialized():
            scan_data = scanner.get_scan()
            if scan_data is None or len(scan_data) == 0:
                logging.warning("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu qu√©t, th·ª≠ l·∫°i sau 0.2s.")
                print("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu qu√©t, th·ª≠ l·∫°i sau 0.2s...")
                time.sleep(0.2)
                continue
            
            if time.time() - last_slam_time < MIN_SCAN_INTERVAL:
                continue
            
            last_slam_time = time.time()
            current_points = polar_to_cartesian_3d(scan_data)
            
            if len(current_points) < 10:
                logging.warning("Kh√¥ng ƒë·ªß ƒëi·ªÉm trong l·∫ßn qu√©t, b·ªè qua.")
                continue
            
            # L·ªçc ngo·∫°i lai
            pcd_current = lidar_to_point_cloud(current_points)
            pcd_current = filter_outliers(pcd_current)
            current_points = np.asarray(pcd_current.points)
            if len(current_points) < 10:
                logging.warning("Kh√¥ng ƒë·ªß ƒëi·ªÉm sau khi l·ªçc, b·ªè qua.")
                continue
            
            # X·ª≠ l√Ω SLAM
            if len(global_map.points) < 100:
                logging.info("Kh·ªüi t·∫°o b·∫£n ƒë·ªì v·ªõi l·∫ßn qu√©t ƒë·∫ßu ti√™n...")
                print("Kh·ªüi t·∫°o b·∫£n ƒë·ªì v·ªõi l·∫ßn qu√©t ƒë·∫ßu ti√™n...")
                global_map.points.extend(o3d.utility.Vector3dVector(current_points))
                current_points_global = current_points
                
            else:
                map_points_for_icp = np.asarray(global_map.points)
                rmse, transformation_matrix = icp(current_points, map_points_for_icp, ICP_THRESHOLD, ICP_VOXEL_SIZE, trans_init=global_pose)
                print(f"ICP RMSE: {rmse:.4f}")
                
                if rmse > 50:
                    logging.warning(f"RMSE cao ({rmse:.4f}), b·ªè qua frame.")
                    print(f"C·∫£nh b√°o: RMSE cao ({rmse:.4f}), b·ªè qua frame.")
                    continue
                
                global_pose = transformation_matrix
                current_points_global = transform_points(current_points, global_pose[:3, :3], global_pose[:3, 3])
                
                # Lo·∫°i b·ªè ƒëi·ªÉm tr√πng v√† ƒëi·ªÉm ƒë·ªông
                current_points_global = remove_duplicate_points(current_points_global, voxel_size=DUPLICATE_VOXEL_SIZE)
                current_points_global = remove_dynamic_points(current_points_global, prev_points, DYNAMIC_DISTANCE_THRESHOLD)
                
                if len(current_points_global) > 0:
                    global_map.points.extend(o3d.utility.Vector3dVector(current_points_global))
                    logging.info(f"ƒê√£ th√™m {len(current_points_global)} ƒëi·ªÉm tƒ©nh v√†o b·∫£n ƒë·ªì.")
                
                # Gi·∫£m m·∫´u b·∫£n ƒë·ªì n·∫øu qu√° l·ªõn
                if len(global_map.points) >5000:
                    print(f"diem truoc giam mau: {len(global_map.points)}")
                    global_map = downsample_point_cloud(global_map, ICP_VOXEL_SIZE / 2.0)
                    logging.info(f"Gi·∫£m m·∫´u b·∫£n ƒë·ªì, s·ªë ƒëi·ªÉm hi·ªán t·∫°i: {len(global_map.points)}")
                    print(f"diem sau giam mau: {len(global_map.points)}")
            # C·∫≠p nh·∫≠t b·∫£n ƒë·ªì chi·∫øm d·ª•ng
            robot_pos_map = global_pose[:3, 3]
            update_occupancy_map(occupancy_map, current_points_global, robot_pos_map, map_center_px, RESOLUTION_MM_PER_PIXEL)
            
            cv2.circle(occupancy_map, (int(map_center_px[0] + robot_pos_map[0] / RESOLUTION_MM_PER_PIXEL),
                                      int(map_center_px[1] - robot_pos_map[1] / RESOLUTION_MM_PER_PIXEL)),
                      3, (0, 0, 255), -1)
            
            # C·∫≠p nh·∫≠t frame cho Flask stream m·ªôt c√°ch an to√†n
            with map_lock:
                latest_map_frame = occupancy_map.copy()
            
    except KeyboardInterrupt:
        logging.info("Ng∆∞·ªùi d√πng d·ª´ng ch∆∞∆°ng tr√¨nh b·∫±ng Ctrl+C.")
        print("Ng∆∞·ªùi d√πng d·ª´ng ch∆∞∆°ng tr√¨nh b·∫±ng Ctrl+C.")
    
    finally:
        if len(global_map.points) > 0:
            print("\nƒêang x·ª≠ l√Ω v√† l∆∞u b·∫£n ƒë·ªì cu·ªëi c√πng...")
            final_map = downsample_point_cloud(global_map, voxel_size=ICP_VOXEL_SIZE)
            o3d.io.write_point_cloud("realtime_map.pcd", final_map)
            logging.info("ƒê√£ l∆∞u b·∫£n ƒë·ªì ƒëi·ªÉm v√†o 'realtime_map.pcd'")
            print("‚úÖ ƒê√£ l∆∞u b·∫£n ƒë·ªì ƒëi·ªÉm v√†o 'realtime_map.pcd'")
            
            cv2.imwrite("realtime_occupancy_map.png", occupancy_map)
            logging.info("ƒê√£ l∆∞u b·∫£n ƒë·ªì chi·∫øm d·ª•ng v√†o 'realtime_occupancy_map.png'")
            print("‚úÖ ƒê√£ l∆∞u b·∫£n ƒë·ªì chi·∫øm d·ª•ng v√†o 'realtime_occupancy_map.png'")
        else:
            print("\nKh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t·∫°o b·∫£n ƒë·ªì.")
        
        scanner.stop()
        # Kh√¥ng c·∫ßn cv2.destroyAllWindows() n·ªØa